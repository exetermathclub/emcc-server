// Generated by CoffeeScript 1.6.3
(function() {
  var MAX_SCORE, doc_body, formatTeam, formatTime, highlighted, position, refreshTeams, refresh_search, remaining_time, searchTeamExact, searchTeamPrefix, search_found, syncTime, teams, zeroPad;

  MAX_SCORE = 400;

  remaining_time = 0;

  search_found = false;

  teams = [];

  highlighted = $("");

  refresh_search = function(x) {
    return x;
  };

  doc_body = null;

  position = 0;

  refreshTeams = function(callback) {
    return $.ajax({
      url: "../wsgi-scripts/guts_round_update.py",
      dataType: "json",
      success: function(data) {
        data.teams.sort(function(a, b) {
          return b.score - a.score;
        });
        return callback(data.teams, function() {
          return refreshTeams(callback);
        });
      }
    });
  };

  syncTime = function(callback) {
    return $.ajax({
      url: "../wsgi-scripts/guts_time_sync.py",
      dataType: "json",
      success: function(data) {
        callback(data);
        return setTimeout((function() {
          return syncTime(callback);
        }), 10000);
      }
    });
  };

  zeroPad = function(n, digits) {
    var str, zeroes, _;
    str = n.toString();
    if (str.length < digits) {
      zeroes = ((function() {
        var _i, _ref, _results;
        _results = [];
        for (_ = _i = 1, _ref = digits - str.length; 1 <= _ref ? _i <= _ref : _i >= _ref; _ = 1 <= _ref ? ++_i : --_i) {
          _results.push("0");
        }
        return _results;
      })()).join("");
      return zeroes + str;
    } else {
      return str;
    }
  };

  formatTime = function(time) {
    var hours, minutes;
    hours = Math.floor(time / 3600);
    time -= hours * 3600;
    minutes = Math.floor(time / 60);
    time -= minutes * 60;
    return zeroPad(hours, 2) + ":" + zeroPad(minutes, 2) + ":" + zeroPad(time, 2);
  };

  formatTeam = function(team) {
    return $("<div>").addClass("team").append($("<div>").addClass("team_name").text(team.name)).append($("<div>").addClass("team_score").text(team.score + " (" + team.progress + ")")).append($("<div>").addClass("team_bar").append($("<div>").addClass("team_scorebar").width((team.score / MAX_SCORE * 100) + "%")).append($("<div>").addClass("team_progressbar").width(((team.progress - team.score) / MAX_SCORE * 100) + "%")));
  };

  searchTeamPrefix = function(search_prefix) {
    var search_length, team, _i, _len;
    search_length = search_prefix.length;
    for (_i = 0, _len = teams.length; _i < _len; _i++) {
      team = teams[_i];
      if (team.name.slice(0, +(search_length - 1) + 1 || 9e9) === search_prefix) {
        search_found = true;
        highlighted = team.el;
        doc_body.scrollTop(team.el.addClass("highlighted").offset().top);
        return function() {
          return searchTeamPrefix(search_prefix);
        };
      }
    }
  };

  searchTeamExact = function(search) {
    var team, _i, _len;
    for (_i = 0, _len = teams.length; _i < _len; _i++) {
      team = teams[_i];
      if (team.name === search) {
        search_found = true;
        highlighted = team.el;
        doc_body.scrollTop(team.el.addClass("highlighted").offset().top);
        return function() {
          return searchTeamExact(search);
        };
      }
    }
  };

  window.onload = function() {
    var animation_interval, animation_limit, body, tick, time_interval, timer;
    syncTime(function(data) {
      return remaining_time = data.time;
    });
    timer = $("div#timer");
    time_interval = setInterval((function() {
      timer.text(formatTime(remaining_time));
      return remaining_time -= 1;
    }), 1000);
    body = $("div#body");
    doc_body = $(document.body);
    animation_limit = 0;
    animation_interval = 0;
    tick = function(cont, time) {
      if (!search_found) {
        position += animation_interval;
        doc_body.scrollTop(position);
      }
      if (position > animation_limit || (new Date()).getTime() - time > 10000) {
        position = 0;
        return setTimeout(cont, 500);
      } else {
        return setTimeout((function() {
          return tick(cont, time);
        }), 1);
      }
    };
    $(window).scroll(function() {
      if (Math.abs(doc_body.scrollTop() - position) > 2) {
        return position = doc_body.scrollTop();
      }
    });
    refreshTeams(function(data, cont) {
      var element, team, _i, _len;
      teams.length = 0;
      body.html("");
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        team = data[_i];
        element = formatTeam(team);
        body.append(element);
        teams.push($.extend({
          el: element
        }, team));
      }
      refresh_search();
      animation_limit = body.height() - $(window).height();
      animation_interval = animation_limit / 5000;
      return tick(cont, (new Date()).getTime());
    });
    return $("#search").keyup(function(e) {
      highlighted.removeClass("highlighted");
      highlighted = $("");
      if (this.value.length === 0) {
        search_found = false;
        refresh_search = function(x) {
          return x;
        };
        return;
      }
      if (e.keyCode === 13) {
        return refresh_search = searchTeamExact(this.value);
      } else {
        return refresh_search = searchTeamPrefix(this.value);
      }
    });
  };

}).call(this);
